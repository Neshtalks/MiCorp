{"version":3,"sources":["main.js"],"names":["initScrollReveal","animateElements","document","querySelectorAll","entry","classList","entries","forEach","isIntersecting","target","add","threshold","observer","element","options","addEventListener","querySelector","navLinks","menuToggle","dropdowns","toggle","e","contains","remove","dropdown","innerWidth","preventDefault","link","clearTimeout","navbar","window","scrollY","anchor","targetId","this","getAttribute","targetElement","scrollTo","offsetTop","top","behavior","resizeTimer","body","setTimeout","contactForm","getElementById","name","email","message","submitButton","regeneratorRuntime","async","_context","prev","next","value","alert","abrupt","disabled","innerHTML","awrap","Promise","resolve","reset","t0","finish","stop","IntersectionObserver","el","observe","offsetHeight","floatingContacts","style","transform","opacity"],"mappings":"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","file":"main.min.js","sourcesContent":["// Mobile Menu Toggle\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    // Mobile menu toggle\r\n    const menuToggle = document.querySelector('.menu-toggle');\r\n    const navLinks = document.querySelector('.nav-links');\r\n    const dropdowns = document.querySelectorAll('.dropdown');\r\n\r\n    if (menuToggle && navLinks) {\r\n        menuToggle.addEventListener('click', function() {\r\n            navLinks.classList.toggle('active');\r\n            menuToggle.classList.toggle('active');\r\n        });\r\n\r\n        // Close menu when clicking outside\r\n        document.addEventListener('click', function(e) {\r\n            if (!navLinks.contains(e.target) && !menuToggle.contains(e.target)) {\r\n                navLinks.classList.remove('active');\r\n                menuToggle.classList.remove('active');\r\n            }\r\n        });\r\n    }\r\n\r\n    // Handle dropdowns in mobile view\r\n    dropdowns.forEach(dropdown => {\r\n        dropdown.addEventListener('click', function(e) {\r\n            if (window.innerWidth <= 768) {\r\n                e.preventDefault();\r\n                this.classList.toggle('active');\r\n            }\r\n        });\r\n    });\r\n\r\n    // Close mobile menu when clicking on a link\r\n    document.querySelectorAll('.nav-links a').forEach(link => {\r\n        link.addEventListener('click', () => {\r\n            menuToggle.classList.remove('active');\r\n            navLinks.classList.remove('active');\r\n        });\r\n    });\r\n    \r\n    // Navbar scroll effect\r\n    const navbar = document.querySelector('.navbar');\r\n    if (navbar) {\r\n        window.addEventListener('scroll', function() {\r\n            if (window.scrollY > 50) {\r\n                navbar.classList.add('scrolled');\r\n            } else {\r\n                navbar.classList.remove('scrolled');\r\n            }\r\n        });\r\n    }\r\n    \r\n    // Smooth scrolling for anchor links\r\n    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\r\n        anchor.addEventListener('click', function(e) {\r\n            e.preventDefault();\r\n            \r\n            const targetId = this.getAttribute('href');\r\n            if (targetId === '#') return;\r\n            \r\n            const targetElement = document.querySelector(targetId);\r\n            if (targetElement) {\r\n                window.scrollTo({\r\n                    top: targetElement.offsetTop - 80,\r\n                    behavior: 'smooth'\r\n                });\r\n            }\r\n        });\r\n    });\r\n    \r\n    // Initialize scroll reveal animations\r\n    initScrollReveal();\r\n\r\n    // Handle animations on resize\r\n    let resizeTimer;\r\n    window.addEventListener('resize', () => {\r\n        document.body.classList.add('resize-animation-stopper');\r\n        clearTimeout(resizeTimer);\r\n        resizeTimer = setTimeout(() => {\r\n            document.body.classList.remove('resize-animation-stopper');\r\n        }, 400);\r\n    });\r\n\r\n    // Contact Form Handling\r\n    const contactForm = document.getElementById('contactForm');\r\n    if (contactForm) {\r\n        contactForm.addEventListener('submit', async function(e) {\r\n            e.preventDefault();\r\n            \r\n            // Basic form validation\r\n            const name = document.getElementById('name').value;\r\n            const email = document.getElementById('email').value;\r\n            const message = document.getElementById('message').value;\r\n            \r\n            if (!name || !email || !message) {\r\n                alert('Please fill in all required fields');\r\n                return;\r\n            }\r\n\r\n            // Add loading state to button\r\n            const submitButton = contactForm.querySelector('button[type=\"submit\"]');\r\n            submitButton.disabled = true;\r\n            submitButton.innerHTML = 'Sending...';\r\n\r\n            try {\r\n                // Here you would typically send the form data to your server\r\n                // For now, we'll just simulate a submission\r\n                await new Promise(resolve => setTimeout(resolve, 1000));\r\n                alert('Thank you for your message. We will contact you soon!');\r\n                contactForm.reset();\r\n            } catch (error) {\r\n                alert('There was an error sending your message. Please try again.');\r\n            } finally {\r\n                submitButton.disabled = false;\r\n                submitButton.innerHTML = 'Send Message';\r\n            }\r\n        });\r\n    }\r\n\r\n    // Intersection Observer for scroll animations\r\n    const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                entry.target.classList.add('visible');\r\n            }\r\n        });\r\n    }, { threshold: 0.1 });\r\n\r\n    // Observe all animated elements\r\n    document.querySelectorAll('.animate-from-left, .animate-from-right, .animate-from-bottom')\r\n        .forEach(el => observer.observe(el));\r\n});\r\n\r\n// Enhanced Scroll Reveal Animation\r\nfunction initScrollReveal() {\r\n    const animateElements = document.querySelectorAll(\r\n        '.animate-from-bottom, .animate-from-left, .animate-from-right, .reveal'\r\n    );\r\n    \r\n    const options = {\r\n        threshold: 0.1,\r\n        rootMargin: '0px 0px -50px 0px'\r\n    };\r\n    \r\n    const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                entry.target.classList.add('active');\r\n                // Optional: Reset animation when element is out of view\r\n                // } else {\r\n                //     entry.target.classList.remove('active');\r\n            }\r\n        });\r\n    }, options);\r\n    \r\n    animateElements.forEach(element => {\r\n        observer.observe(element);\r\n        // Add initial state class\r\n        element.classList.add('animate-init');\r\n    });\r\n}\r\n  // Additional animation for floating contacts on scroll\r\n        window.addEventListener('scroll', function() {\r\n            const floatingContacts = document.querySelector('.floating-contacts');\r\n            const contactHero = document.querySelector('.contact-hero');\r\n            const heroHeight = contactHero.offsetHeight;\r\n            const scrollPosition = window.scrollY;\r\n            \r\n            if (scrollPosition > heroHeight * 0.3) {\r\n                floatingContacts.style.transform = 'translateY(0) scale(0.9)';\r\n                floatingContacts.style.opacity = '0.9';\r\n            } else {\r\n                floatingContacts.style.transform = 'translateY(0) scale(1)';\r\n                floatingContacts.style.opacity = '1';\r\n            }\r\n        });\r\n\r\n// Initialize animations after page load\r\nwindow.addEventListener('load', initScrollReveal);"]}