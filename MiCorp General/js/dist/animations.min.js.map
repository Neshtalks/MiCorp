{"version":3,"sources":["animations.js"],"names":["document","addEventListener","querySelector","hero","scrollPosition","window","pageYOffset","style","backgroundPositionY","querySelectorAll","forEach","card","e","rect","this","getBoundingClientRect","x","clientY","top","centerX","angleX","width","left","angleY","height","transform","elements","element","screenPosition","innerHeight","animationPlayState","animateOnScroll","windowHeight","revealElements","classList","add","revealOnScroll","animateStats","IntersectionObserver","entries","observer","unobserve","entry","isIntersecting","target","statsSection","revealObserver","revealCallback","observe"],"mappings":"aACAA,SAASC,iBAAiB,mBAAoB,WAA9CD,IAASC,EAAAA,SAAiBC,cAAA,SACtBC,GACMA,OAAOH,iBAASE,SAAc,WAG5B,IAAME,EAAiBC,OAAOC,YAF5BH,EAAAI,MAAAC,oBAAA,GAAAJ,EAAA,OACNJ,SAAAS,iBAAA,iBAKJC,QAAA,SAAAC,GAGIA,EAAKV,iBAAiB,YAAa,SAASW,GACxC,IAAMC,EAAOC,KAAKC,wBAHRC,EAAGhB,EAAAA,QAASS,EAAAA,KACjBC,EAAbE,EAAqBK,QAAAN,EAAQO,IAERC,EAAKJ,EAAAA,MAAAA,EAILK,GAAQC,EAHCR,EAAKS,OAA3B,GAGA,GACaC,GAAQC,EAArBR,GAAA,GAGMO,KAAMhB,MAAIY,UAAVI,+BAAAA,OAANH,EAAMG,iBAAAA,OAANA,EAAMA,UAKNZ,EAACV,iBAAiB,aAAc,WAC3BM,KAAMkB,MAAAA,UAAY,gDAMDhB,SAApBiB,IAEW1B,SAAA2B,iBAAW,mFAElBC,QAAc,SAAAD,GADIA,EAAQZ,wBAAwBG,IAGlCU,OAAtBC,YAAsC,MAJ1CF,EAAApB,MAAAuB,mBAAA,aAnCRzB,OAAAJ,iBAAA,SAAA8B,GAiDA/B,MAAAA,SAASC,iBAAiB,mBAAoB,WAObI,SAAf2B,IAFVC,EAAevB,QAAQ,SAAAiB,GAIFK,EAAejB,wBAAKG,IACXb,OAAtBwB,YALR,KADJF,EAAAO,UAAAC,IAAA,YACIF,IAAAA,EAAuBjC,SAAAS,iBAAW,WAUtCJ,OAAOJ,iBAAiB,SAAUmC,GAIlCA,IAGYC,IAAAA,EAAY,IAAAC,qBAAA,SAAAC,GACZC,EAAQ9B,QAAC+B,SAAAA,GACZC,EAAAC,iBAJLN,eADJG,EAAAC,UAAAC,EAAAE,aAYCC,EAAA7C,SAAAE,cAAA,kBA/BL2C,GAkCQL,EAACvC,QAAT4C,KAC4B7C,SAAxBC,iBAAA,mBAAA,WAAA,IADJ6C,EAAA,IAAAR,qBAUa,SAAAC,GAHLA,EAAA7B,QAAA,SAAAgC,GADJA,EAAAC,gBAGYD,EAAME,OAAOV,UAAUC,IAAI,aARf,CAKlBY,UAAAA,GACFR,WAAgB,SASpBvC,SAASS,iBAAiB,gCAAgCC,QAAQ,SAAAiB,GAC9DmB,EAAeE,QAAQrB","file":"animations.min.js","sourcesContent":["// Additional animations and effects\r\ndocument.addEventListener('DOMContentLoaded', function() {\r\n    // Parallax effect for hero section\r\n    const hero = document.querySelector('.hero');\r\n    if (hero) {\r\n        window.addEventListener('scroll', function() {\r\n            const scrollPosition = window.pageYOffset;\r\n            hero.style.backgroundPositionY = scrollPosition * 0.5 + 'px';\r\n        });\r\n    }    \r\n    // Product card hover effect\r\n    const productCards = document.querySelectorAll('.product-card');\r\n    productCards.forEach(card => {\r\n        card.addEventListener('mousemove', function(e) {\r\n            const rect = this.getBoundingClientRect();\r\n            const x = e.clientX - rect.left;\r\n            const y = e.clientY - rect.top;\r\n            \r\n            const centerX = rect.width / 2;\r\n            const centerY = rect.height / 2;\r\n            \r\n            const angleX = (y - centerY) / 20;\r\n            const angleY = (centerX - x) / 20;\r\n            \r\n            this.style.transform = `perspective(1000px) rotateX(${angleX}deg) rotateY(${angleY}deg)`;\r\n        });\r\n        \r\n        card.addEventListener('mouseleave', function() {\r\n            this.style.transform = 'perspective(1000px) rotateX(0) rotateY(0)';\r\n        });\r\n    });\r\n    \r\n    // Animate elements when they come into view\r\n    const animateOnScroll = function() {\r\n        const elements = document.querySelectorAll('.animate-from-bottom, .animate-from-left, .animate-from-right, .animate-fade-in');\r\n        \r\n        elements.forEach(element => {\r\n            const elementPosition = element.getBoundingClientRect().top;\r\n            const screenPosition = window.innerHeight / 1.2;\r\n            \r\n            if (elementPosition < screenPosition) {\r\n                element.style.animationPlayState = 'running';\r\n            }\r\n        });\r\n    };\r\n    \r\n    window.addEventListener('scroll', animateOnScroll);\r\n    animateOnScroll(); // Run once on page load\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    // Reveal animations\r\n    const revealElements = document.querySelectorAll('.reveal');\r\n    \r\n    const revealOnScroll = () => {\r\n        revealElements.forEach(element => {\r\n            const elementTop = element.getBoundingClientRect().top;\r\n            const windowHeight = window.innerHeight;\r\n            \r\n            if (elementTop < windowHeight - 100) {\r\n                element.classList.add('active');\r\n            }\r\n        });\r\n    };\r\n\r\n    window.addEventListener('scroll', revealOnScroll);\r\n    revealOnScroll(); // Initial check\r\n\r\n    // Trigger stats animation when section is in view\r\n    const observer = new IntersectionObserver((entries) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                animateStats();\r\n                observer.unobserve(entry.target);\r\n            }\r\n        });\r\n    });\r\n\r\n    const statsSection = document.querySelector('.stats-section');\r\n    if (statsSection) {\r\n        observer.observe(statsSection);\r\n    }\r\n});\r\n\r\ndocument.addEventListener('DOMContentLoaded', () => {\r\n    const observerOptions = {\r\n        threshold: 0.2,\r\n        rootMargin: '50px'\r\n    };\r\n\r\n    const revealCallback = (entries) => {\r\n        entries.forEach(entry => {\r\n            if (entry.isIntersecting) {\r\n                entry.target.classList.add('reveal');\r\n            }\r\n        });\r\n    };\r\n\r\n    const revealObserver = new IntersectionObserver(revealCallback, observerOptions);\r\n\r\n    document.querySelectorAll('.product-card, .vehicle-card').forEach(element => {\r\n        revealObserver.observe(element);\r\n    });\r\n});"]}